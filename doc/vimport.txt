
==============================================================================
CONTENTS                                      *vimport* *vimport-contents*

    Installation...........................: |vimport-installation|
    Usage..................................: |vimport-usage|
    Commands...............................: |vimport-commands|
    Settings...............................: |vimport-settings|
    Internals..............................: |vimport-internals|
    Issues.................................: |vimport-issues|


==============================================================================
INSTALLATION                                           *vimport-installation*

Vundle (http://github.com/gmarik/vundle)
include the following line in your .vimrc
>
    Bundle 'sjurgemeyer/vimport'
<

Then, run
>
    :BundleInstall
<

Pathogen (https://github.com/tpope/vim-pathogen)
clone the plugin's git repository
>
    git clone git://github.com/sjurgemeyer/vimport.git ~/.vim/bundle/vimport
<
If your vim configuration is under git version control, you could also set up
the repository as a submodule, which would allow you to update more easily.
The command is (provided you're in ~/.vim):
>
    git submodule add git://github.com/sjurgemeyer/vimport.git bundle/vimport
<

You can also just copy the files the old fashioned way, but I don't condone that type of behavior

==============================================================================
USAGE                                                         *vimport-usage*
The plugin provides several functions for creating and manipulating imports in groovy
files.  The biggest value add is the :InsertImport command which is by default mapped
to <leader>i

When in normal mode with your cursor over a class name, type <leader>i.  The plugin will
search the current working directory for file names that match the class name
and create an import statement using a derived package.  In addition, the
plugin comes with a list of common external classes that will be searched as
well.
==============================================================================
COMMANDS                                                   *vimport-commands*

                                              :InsertImport
:InsertImport     The main interface of the plugin.  By default it's mapped to
                  <leader>i. Searches for a file that matches the word under
                  the cursor and attempts to create an import based on that
                  file's location.

                                              *:OrganizeImports*
:OrganizeImports Sorts the imports.

                                              *:RemoveUnneededImports*
:RemoveUnneededImports Removes imports that do not have a class referenced
                  within the current file.  This does nothing to .* imports

                                              *:VimportReloadImportCache *
:VimportReloadImportCache Reload available imports from specified files for the
current filetype

                                              *:VimportReloadGradleCache *
:VimportReloadGradleCache Reload available imports from Gradle


                                              *:VimportReloadFilepathCache *
:VimportReloadFilepathCache Reload available imports from file path
==============================================================================
SETTINGS                                                *vimport-settings*


------------------------------------------------------------------------------
g:vimport_map_keys                                *vimport_map_keys*

Allow vimport to automatically map keys

Default: 1

------------------------------------------------------------------------------
g:vimport_insert_shortcut                 *vimport_insert_shortcut*

mapping for the InsertImport command

Default: '<leader>i'

------------------------------------------------------------------------------
g:vimport_filetype_import_files                             *vimport_filetype_import_files*

The plugin ships with files that contain some common classes with their
packages.  This is used to find classes that don't exist in the current
project.  This by no means coves all classes you may wish to import from external
libraries.

You can update this property to add additional files that contain
lists of classes for each filetype.

Default  {
        \ 'java': [{vimport install location}/vimports_java.txt'],
        \ 'groovy': ['{vimport install location}/vimports_java.txt', '{vimport install location}/vimports_groovy.txt', '{vimport install location}/vimports_grails.txt'],
        \ 'kotlin': ['{vimport install location}/vimports_kotlin.txt']
    \ }
------------------------------------------------------------------------------
g:vimport_auto_organize                          *s_import_auto_organize*

When inserting imports the plugin automatically organizes the imports based on
alphabetical package listing with spaces between major package names.  If you
wish to remove this behavior, set this property to 0

Default: 1
------------------------------------------------------------------------------
g:vimport_auto_remove                         *vimport_auto_remove*

When inserting imports the plugin automatically removes imports that do not
have a reference in the current file.  If you wish to remove this behavior,
set this property to 0.

Default: 1
------------------------------------------------------------------------------
g:vimport_file_extensions                 *vimport_file_extensions*
The file extensions to use when searching for matching files.

Default ['groovy', 'java', 'kt', 'kts']

------------------------------------------------------------------------------
g:vimport_import_groups                         *vimport_import_groups
By default, vimport will sort packages alphabetically and create a line break
every time the first level of the package changes.  If you wish to have groups
that are sorted differently, you can define groups and put them in the desired
order.

e.g.
let g:vimport_import_groups = [
        \ {
            \ 'name' : 'java',
            \ 'matcher' : 'import java'
        \ },
        \ {
            \ 'name' : 'static',
            \ 'matcher' : 'import static .*'
        \ },
    ]

This example will put items that match "import java" after all unmatched items,
followed by all items that match "import static".  Be aware that currently the
matcher provided will be compared to the first section of the path before the '.'


Default ['groovy', 'java', 'kt', 'kts']
------------------------------------------------------------------------------
g:vimport_search_path                         *vimport_search_path*
By default, the plugin searches the working directory when trying to find
matching files.  If you wish to set this to something else by default you can
modify this property.

Default '.'

------------------------------------------------------------------------------
g:vimport_lookup_gradle_classpath				*g:vimport_lookup_gradle_classpath*
Enable gradle integration.  This will lookup the classpath from gradle using the
nearest 'build.gradle' file to the current file.  The first time this is done
in a project will be slow as vimport caches the available classes.  This overrides
filetype import lookup

Default 0

==============================================================================
INTERNALS                                                 *vimport-internals*
TODO


==============================================================================
ISSUES                                                       *vimport-issues*

To report any issues or offer suggestions, use the bugtracker of the github
project at http://github.com/sjurgemeyer/vimport/issues
